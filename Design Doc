Design Doc
-------------
Problem definition:
------------------------
File manager attempts to list shared files on user's device
in a simple to use interface.

Get access to audio, video, image and documents all in one
place.

From the application's developer's perspective, this File manager
demonstrates how to access an Android's device's shared folders
specifically through the use of MediaStore API.

User stories:
------------------
First launched activity displays image, video, audio and document
folders that the user can interact with. Clicking on any of
the folders would launch another activity that would display
the selected folder in detail  (Done)

 - Create a side project to expirment opening pdf, xml, html
   and other common documents with the app chooser. (So far
   pdf can be opened)
 
 - Integrate the file picker into the file manager app so that
   user can select which files to open (Done)
   
 - Integrate the app chooser into the file manager app so
   that users can open selected files (Done)
   
 - Create an alert dialog box to alert users to select files
   to open before prompting user with the system file picker
   (Done)
        



The folder detail activity should display meta data for all files in the
selected files in the shared folder in a recyclerview list when it is selected 
 
  - In folder detail activity, implement the file long click event handler so that, the appbar changes color to indicate the
    clicked file has been selected (Done)
    
  - Create the menu options in the FileDetailActivity so that users may open and view properties of a selected file (Done)
    - create the menu xml
    - implement onCreateOptionsMenu() in FileDetailActivity, to inflate the FileDetailActivity options menu
    - impelement the event events for the open, and view file properties button(s) of the menu option
       - open - launches app chooser to open the clicked file
       - view properties - launches alert dialog and displays file properties
       - Implement alert dialog to display file properties of a selected file
         
  
  - In the same long click event handler, make the menu options in the toolbar visible so that the user can 
    1) Open the file
    2) View file properties  
    
  - Create a method that will display the selected file properties (?+ 6 Hours left)
    - Create an alert dialog that will display the file properties as a string (Done)
    - Find out how to also add extension and date modified in media object, then display it in dialog ( 6+ hours )
      - Find a solution to get a date modified - implement and test ( 3 hours) (Done)
      - Find a solution to get a file's extension only - implement and test ( 3 hours)(Done)
 
 


Display lines beteen fileitems while recyclerview is using a linear layout manager (< 1 Hours) (Done)

Add a button to toggle FileDetailActivity's recyclerview layout manager between LinearLayout manager and GridLayout manager (?+10 or more hours)
    (3 Subfeatures: Add toogle button assets, implement toogle layout as menu option, Research and implement code solution
      get file thumbnail and load into recyclerview item layout)

    - Add vector assets for the button responsible for changing the recyclerview's layout manager at runtime (Between linear and grid)
      (1 Hour)***(Done)
    
    - Add a toogle button in FileDetailActivity layout, as a button ( Menu options) (3 Hours)***
      	 - Research how to display this menu option as an icon adjacent to the 3 dot menu
     	 - Add two options menu options R.id.toogleLinearLayout, R.id.toogleGridLayout (Done)
         	
      
      	 - Add logic to onCreateMenuOptions().
    		 switch...case R.id.toogleLinearLayout{
    		  		 mediaFileAdapter.setLayoutMode(MediaFileAdapter.GRID_LAYOUT);
    		 	 	 recyclerview.setLayoutManager(GridLayoutManager);
    	 	 	} break;...
    	  	
    	     		 case R.id.toogleGridLayout
    	     		  { mediaFileAdapter.setLayoutMode(MediaFileAdapter.LINEAR_LAYOUT)
    	   		     recyclerview.setLayoutManger(LinearLayoutManager)		
 	      	          }
    	    		   mediaFileAdapter.notifyDataChanged 
    	      	 }
    	      	 
    	      	 - Check (https://stackoverflow.com/questions/40106261/android-recyclerview-switching-layouts-grid-list-old-viewholders-used) for reference
     
       - Create another .xml layout named mediafile_gridlayout_item to display BaseMediaFile objects in a recyclerview when the layout
     	 manager changes to GridLayoutManager) (3 hours)
     	 
     	   - Layout should have a framelayout to highlight if selected
     	   - Layout should have a container to hold file thumbnails
     	   - Layout should have field to display filename with extension
      
           - When user onClick() viewHolder use holder.setSelected(true)
             in onBindViewholder(). Inside .setSelected change the background color of the framelayout to color primary if
             input parameter is true else default background color
   
    - Research: solutions on how to acess MediaFile thumbnails, so they can be displayed at a later stage implement and test (+ 3 Hours ?)
     (Done)
      
New feature: Add multithreading code in the viewmodel, so that any access to the repository from the viewmodel is done in the background. Core operations include: read/write opertations to & from external storage. read/write operations to & from internal storage      
     
New feature: Add a bottom navigation to switch between External storage (SharedFolderActivity.java) and
internal storage

Maintenance: Refactor SharedFoldersActivity.java to SharedStorageFragment (AppcompatActivity->Fragment), then
 - Create a new activities (Splashscreen activity, HomeActivity)
 
 - SplashScreenActivity.java 
    - Add icon to activity, and a fading transition into HomeActivity.java
 
 - HomeActivity should contain a viewpager that syncs with bottom navigation UI component. The navigator allows the user
   to switch between SharedStorageFragment.java and InternalStorageFragment.java(to be implemented)
    - Add the bottomNavigation with relevant icons, and add InternalStorageFragment.java. Implement navigation logic
     for the bottomNavigation so you can switch between fragments


New feature: Provide the implemtation details for InternalStorageFragment.java which will
 - Display folders or files in a recyclerview layout. (Toggle between GridlayoutManager and LinearLayoutManager)
 
 	- Implement the UI for InternalStorageFragment.java to display the 
 		- Create the recyclerview layout (uses LinearLayoutManager) to display List<Files)
 		- Create the Adapter for the recyclerview that will display the List<Files>
 		  - For each File, display a File icon in the viewholder layout if there is no extension and, display
 		    thumbnail if (a mediafile), display pdf icon if  pdf file etc. (Use FileIconBuilder)
 		      - Create a FileIconBuilder.class which returns a icon based on the string file extension,
 		- Create a contextual menu that will allow the user to
 		  - switch between LinearLayoutManager and GridLayoutManager
 		  - launch mediafiles using appchooser
 		  - launch TextFileActivity.java (if .txt file)
 		  - check file properties
 		  - Add the icon assets to the contextual menu without implementing the onClick() event
 		    handlers
 
 	- Implement the backend logic to aquire the list of files in the top level directory in internal storage.
 	   -Create a class called InternalFileStorage.java which will be the DAO.
 	     (create Method -> +public List<File> getFiles())
 	   -Add InternalFileStorage.java to Repository as a dependency.
 	   -Add accessor in Repository that will allow viewmodel to access List<File> from internal storage given
 	    the target directory.
 	   -Add a method in the viewmodel that access internal storage files from the repository on a background thread
 	   -Test accessor: in InternalStorageFragment.java, create a method to test access to files in internal storage
 	     ->Btn click -> onClick() -> internalStorageViewModel.getFiles() -> data (List<File>) returned as livedata   
 	      
 	
   
           	-
   





